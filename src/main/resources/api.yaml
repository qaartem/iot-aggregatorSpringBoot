openapi: 3.0.0
info:
  description: |
    IOT server specification
  version: "1.0.0"
  title: IOT server
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/artemminsadyrov/testClvAkademie2023/1.0.0
  - url: "https://localhost:8080"
paths:
  /identification:
    get:
      summary: Metoda nacte identifikaci IOT serveru
      operationId: getIdentification
      responses:
        200:
          description: OK response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Identification"
        500:
          description: Service unavailable
  /data:
    post:
      summary: Metoda ulozi data
      operationId: saveData
      responses:
        200:
          description: OK response
        "400":
          description: Invalid input
      requestBody:
        $ref: "#/components/requestBodies/DataToStore"
    get:
      summary: Metoda nacte vsechny data
      operationId: getData
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MeteoData"
        "400":
          description: Invalid status value

components:
  schemas:
    Owner:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          example: Jan
        lastName:
          type: string
          example: Novak
    Address:
      type: object
      required:
        - street
        - city
      properties:
        street:
          type: string
          example: Hlavni
        streetNumber:
          type: string
          example: 3D
        city:
          type: string
          example: Praha
    Identification:
      type: object
      required:
        - name
        - owner
        - address
      properties:
        name:
          type: string
        owner:
          $ref: "#/components/schemas/Owner"
        address:
          $ref: "#/components/schemas/Address"
    MeteoData:
      type: object
      required:
        - humidity
        - temperature
        - light
        - pressure
      properties:
        humidity:
          type: number
        temperature:
          type: number
          description: Tempretuire in C
        light:
          type: number
        pressure:
          type: number
  requestBodies:
    DataToStore:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MeteoData"
